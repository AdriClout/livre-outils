# Outils d'intelligence artificielle

<!-- # Sapientia Artificiosa: L'Excellence Cognitive au Service des Études Sociales" -->

<!-- # En général, c'est quoi l'IA, le ML, le DL, etc.? (en mentionnant que c'est un champ qui change tout le temps) (JOZEF) -->

<!-- # La révolution ChatGPT -->

<!-- -   Corpus de textes humains donc possibilité de plagiat -->
<!-- -   Tracer la ligne entre plagiat et outil d'assistance -->
<!-- -   Parler des revues de science po qui veulent qu'on déclare l'utilisation de ce genre de AI -->
<!-- -   Brainstorm -->
<!-- -   l'API de OpenAI -->
<!-- -   Biais de ce genre d'IA -->

<!-- # Deepl, google traduction, etc, -->

<!-- # Midjourney, génération d'images, etc. -->

<!-- -   Parler du plagiat -->

<!-- # 1 autre exemple? -->

<!-- # Machine Learning, reconnaissance d'images etc -->

<!-- -   AWS, Calcul Québec, etc. -->

<!-- # LLM, chatbots, etc. -->

<!-- -   Ce qui s'en vient dans ce domaine? -->

<!-- Salut -->



# Utilisation du package OpenAI en .r

## Installation du package

```{r}
install.packages("openai")
library(openai)
```

## Configuration de l'API

Procurez vous une clé API sur le site d'OpenAI. Soyez conscient que vous aurez besoin d'une carte de crédit pour vous inscrire et que l'utilisation de l'API est payante. Renseignez-vous sur les modèles disponibles et leurs frais d'utilisation. En date de la publication du livre, le modèle de tarification d'OpenAi est de charger un prix spécifique par 1000 tokens. Le prix des Tokens en entrée est moins élevé que celui des tokens en sortie. 

Lorsque vous aurez votre clé API, utilisez le package usethis pour la configurer dans votre environnement R. 

```{r}
install.packages("usethis")
usethis::edit_r_environ()
```

Ajoutez la ligne suivante à votre fichier .Renviron

```
OPENAI_API_KEY=inserez-votre-cle-api-ici-sans-guillemets
```

## Utilisation de l'API

La fonction principale du package openai est create_chat_completion(). Elle prend en entrée le modèle que vous souhaitez utiliser ainsi que le message que vous souhaitez envoyer au modèle en format list. Voici un modèle d'utilisation de la fonction:


```{r}
chat_prompt <- create_chat_completion(
    model = "gpt-3.5-turbo",
    messages = list(
        list(
            "role" = "system",
            "content" = "You are a helpful assistant."
        ),
        list(
            "role" = "user",
            "content" = "Please do the following:")
        )
    )
```

Le résultat de votre requête sera contenu dans l'objet chat_prompt formatté en JSON. Vous pouvez accéder aux variables de la même façon qu'un dataframe normal. Le contenu de la réponse sera dans chat_prompt$choices$content. 

Utiliser chatgpt de cette façon ouvre plein de possibilités. Appliquer des instructions sur un ensemble d'observations à l'aide de boucles, utiliser des fonctions pour générer des messages et les appliquer à travers d'autres API, analyser des sites webs en temps réel en scraping avec des paquets tels rvest, etc. Ce sera à vous de réfléchir aux possibilités que vous souhaitez explorer.

## Notes

- Il est possible d'accéder aux statistiques d'utilisation de token dans chat_prompt$usage$prompt_tokens et chat_prompt$usage$completion_tokens. Vous pouvez donc calculer le coût de votre requête en fonction du modèle que vous utilisez.

- Ne pas oublier d'inclure .Renviron dans votre gitignore pour ne pas vous faire voler votre clé API.

- Il est possible de créer des images avec la fonction create_image("Inserez votre texte ici")

- Il est possible d'effectuer du speech-to-text avec la fonction create_transcription() et create_translation()

- Plus de documentation est disponible au https://irudnyts.github.io/openai/

- Plus de fonctionalités sont disponibles en python mais le package R est suffisant pour la plupart des utilisations.
